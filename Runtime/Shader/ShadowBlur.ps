//--------------------------------------------------------------------------------------
// Constant Buffer Variables
//--------------------------------------------------------------------------------------
#define SEPERABLE_BLUR_KERNEL_SIZE 3


static const int BLUR_KERNEL_BEGIN = SEPERABLE_BLUR_KERNEL_SIZE / -2; 
static const int BLUR_KERNEL_END = SEPERABLE_BLUR_KERNEL_SIZE / 2 + 1;
static const float FLOAT_BLUR_KERNEL_SIZE = (float)SEPERABLE_BLUR_KERNEL_SIZE;


Texture2DArray txScreen : register( t0 );
SamplerState samLinear : register( s0 );


//--------------------------------------------------------------------------------------
// IO structures
//--------------------------------------------------------------------------------------
struct VS_INPUT
{
    uint Id	: SV_VertexID ;
};

struct PS_INPUT
{
    float4 Pos	   : SV_Position;		//Position
    float2 Tex	   : TEXCOORD;		    //Texture coordinate
};


//--------------------------------------------------------------------------------------
// Vertex Shader
//--------------------------------------------------------------------------------------
PS_INPUT VS(VS_INPUT In)
{
    PS_INPUT OUT;

    OUT.Pos.y = -1.0f + (In.Id%2) * 2.0f;
    OUT.Pos.x = -1.0f + (In.Id/2) * 2.0f;
    OUT.Pos.z = 0.5f;
    OUT.Pos.w = 1;
    OUT.Tex.x = In.Id/2;
    OUT.Tex.y = 1.0f - In.Id%2;
    return OUT;
}

//-------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float2 PSBlurX(PS_INPUT input) : SV_Target
{  
    float2 dep=0;
    [unroll]for ( int x = BLUR_KERNEL_BEGIN; x < BLUR_KERNEL_END; ++x ) 
	{
        dep += txScreen.Sample( samLinear,  float3( input.Tex.x, input.Tex.y, 0 ), int2( x,0 ) ).rg;
    }
    dep /= FLOAT_BLUR_KERNEL_SIZE;
    return dep;
}

float2 PSBlurY(PS_INPUT input) : SV_Target
{	
    float2 dep=0;
    [unroll]for ( int y = BLUR_KERNEL_BEGIN; y < BLUR_KERNEL_END; ++y ) 
	{
        dep += txScreen.Sample( samLinear,  float3( input.Tex.x, input.Tex.y, 0 ), int2( 0,y ) ).rg;
    }
    dep /= FLOAT_BLUR_KERNEL_SIZE;
    return dep;
}